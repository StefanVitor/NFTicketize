scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils PairUtils ListUtils IntUtils
library CreatorsBoost

(* User-defined ADTs *)
type Dummy =
| Dummy

type Operation =
| Add
| Sub

(* Global variables *)
let zero = Uint256 0
let zero_int_32 = Int32 0
let zero_uint128 = Uint128 0
let one = Uint256 1
let one_int_32 = Int32 1
let one_uint_32 = Uint32 1
let two_uint_32 = Uint32 2
let two_uint_128 = Uint128 2
let three_uint_32 = Uint32 3
let four_uint_32 = Uint32 4
let one_hundred_uint128 = Uint128 100
let negative_one_int_32 = Int32 -1
let verdad = Dummy
let add_operation = Add
let sub_operation = Sub
let minute_seconds = Uint32 60
let week_seconds = Uint32 604800 
let month_seconds = Uint32 2629800 
let block_seconds = Uint32 40

(* Library functions *)
let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
  fun (msg1 : Message) =>
  fun (msg2 : Message) =>
    let msgs_tmp = one_msg msg2 in
    Cons {Message} msg1 msgs_tmp

let three_msgs =
fun (msg1 : Message) =>
fun (msg2 : Message) =>
fun (msg3 : Message) =>
  let msgs_tmp = two_msgs msg3 msg2 in
  Cons {Message} msg1 msgs_tmp

let get_bal =
  fun (some_bal: Option Uint256) =>
    match some_bal with
    | Some bal => bal
    | None => zero
    end

(* Error exception *)
type Error =
  | CodeNotContractOwner
  | CodeIsSelf
  | CodeTokenExists
  | CodeIsNotMinter
  | CodeNotApproved
  | CodeNotTokenOwner
  | CodeNotFound
  | CodeNotApprovedForAll
  | CodeNotOwnerOrOperator
  | CodeNotApprovedSpenderOrOperator
  | CodeNotProjectOwner
  | CodeFullTier
  | CodeTierIdMaxSubscriberNotFound
  | CodeTierIdPriceNotFound
  | CodeNotEnoughBalance
  | CodeProjectHasNoOwner
  | CodeTierHasNoProject
  | CodeTierHasNoTimeLimit

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotContractOwner             => Int32 -1
      | CodeIsSelf                       => Int32 -2
      | CodeTokenExists                  => Int32 -3
      | CodeIsNotMinter                  => Int32 -4
      | CodeNotApproved                  => Int32 -5
      | CodeNotTokenOwner                => Int32 -6
      | CodeNotFound                     => Int32 -7
      | CodeNotApprovedForAll            => Int32 -8
      | CodeNotOwnerOrOperator           => Int32 -9
      | CodeNotApprovedSpenderOrOperator => Int32 -10
      | CodeNotProjectOwner              => Int32 -11
      | CodeFullTier                     => Int32 -12
      | CodeTierIdMaxSubscriberNotFound  => Int32 -13
      | CodeTierIdPriceNotFound          => Int32 -13
      | CodeNotEnoughBalance             => Int32 -14
      | CodeProjectHasNoOwner            => Int32 -15
      | CodeTierHasNoProject             => Int32 -16
      | CodeTierHasNoTimeLimit           => Int32 -17
      end
    in
    { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract CreatorsBoost
(
  contract_owner: ByStr20,
  name : String,
  symbol: String
)

(* Mutable fields *)

(* Mapping between token_id to token_owner *)
field tokens_owner: Map Uint256 ByStr20 = Emp Uint256 ByStr20

(* Mapping from owner to number of owned tokens *)
field owned_token_count: Map ByStr20 Uint256 = Emp ByStr20 Uint256

(* Mapping between token_id to approved address                              *)
(* @dev: There can only be one approved address per token at any given time. *)
field tokens_approval: Map Uint256 ByStr20 = Emp Uint256 ByStr20

(* Mapping between token for sell and token_price*)
field tokens_sell_price: Map Uint256 Uint128 = Emp Uint256 Uint128

(* Mapping between token_id to tokens_creator *)
field tokens_creator: Map Uint256 ByStr20 = Emp Uint256 ByStr20

(* Mapping between token_id to tier_id *)
field tokens_tier_id: Map Uint256 Uint256 = Emp Uint256 Uint256

(* Mapping between token_id to tier_id *)
field tokens_time_limit: Map Uint256 BNum = Emp Uint256 BNum

(* Mapping of token_owner to operator  *)
field operator_approvals: Map ByStr20 (Map ByStr20 Dummy)
                            = Emp ByStr20 (Map ByStr20 Dummy)

(* Total token count *)
field total_supply: Uint256 = Uint256 0

(* Used token id *)
field token_id_count: Uint256 = Uint256 0


(* Project id *)
field project_id_count: Uint256 = Uint256 0

(* Mapping between project id to project owner*)
field projects_owner: Map Uint256 ByStr20 = Emp Uint256 ByStr20

(* Tier definition id*)
field tier_id_count: Uint256 = Uint256 0

(* Mapping between tier id and project id *)
field tier_ids_project: Map Uint256 Uint256 = Emp Uint256 Uint256

(* Mapping between tier id and max tier subscriber; If max_subscriber = -1, than there is not restriction*)
field tier_ids_max_subscriber: Map Uint256 Int32 = Emp Uint256 Int32

(* Mapping between tier id and tier count subscriber*)
field tier_ids_subscriber_count: Map Uint256 Int32 = Emp Uint256 Int32

(* Mapping between tier id and time limit for tier; 1 - week, 2 - month, 3 - lifetime, 4 - minute *)
field tier_ids_time_limit: Map Uint256 Uint32 = Emp Uint256 Uint32

(* Mapping between tier id and tier price *)
field tier_ids_price: Map Uint256 Uint128 = Emp Uint256 Uint128

(* Mapping between tier id and resell type - *1 percent, 2 fixed *)
field tier_ids_resell_type: Map Uint256 Uint32 = Emp Uint256 Uint32

(* Mapping between tier id and resell type *)
field tier_ids_resell_value: Map Uint256 Uint128 = Emp Uint256 Uint128

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end

procedure IsSelf(address_a: ByStr20, address_b: ByStr20)
  is_self = builtin eq address_a address_b;
  match is_self with
  | False =>
  | True =>
    err = CodeIsSelf;
    ThrowError err
  end
end

procedure IsTokenExists(token_id: Uint256)
  token_exist <- exists tokens_owner[token_id];
  match token_exist with
  | False =>
  | True =>
    err = CodeTokenExists;
    ThrowError err
  end
end

procedure IsTokenOwner(token_id: Uint256, address: ByStr20)
  some_token_owner <- tokens_owner[token_id];
  match some_token_owner with
  | Some addr => 
    is_token_owner = builtin eq addr address;
    match is_token_owner with
    | True =>
    | False =>
      err = CodeNotTokenOwner;
      ThrowError err
    end
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

procedure IsApprovedForAll(token_owner: ByStr20, operator: ByStr20)
  is_operator_approved <- exists operator_approvals[token_owner][operator];
  match is_operator_approved with
  | True =>
  | False =>
    err = CodeNotApprovedForAll;
    ThrowError err
  end
end

procedure IsOwnerOrOperator(token_owner: ByStr20)
  is_owner = builtin eq _sender token_owner;
  is_approved_for_all <- exists operator_approvals[token_owner][_sender];
  is_authorised = orb is_owner is_approved_for_all;
  match is_authorised with
  | True =>
  | False =>
    err = CodeNotOwnerOrOperator;
    ThrowError err
  end
end

procedure IsApprovedSpenderOrOperator(token_id: Uint256, token_owner: ByStr20)
  some_token_approval <- tokens_approval[token_id];
  is_approved = match some_token_approval with
    | None => False
    | Some approved_address => 
      builtin eq _sender approved_address
    end;
  is_operator <- exists operator_approvals[token_owner][_sender];
  is_authorised = orb is_approved is_operator;
  match is_authorised with
  | True =>
  | False =>
    err = CodeNotApprovedSpenderOrOperator;
    ThrowError err
  end
end

procedure UpdateTokenCount(operation: Operation, address: ByStr20)
  match operation with
  | Add =>
    some_to_count <- owned_token_count[address];
    new_to_count = 
      let current_count = get_bal some_to_count in
      builtin add current_count one;
    owned_token_count[address] := new_to_count
  | Sub =>
    some_from_count <- owned_token_count[address];
    new_from_count = 
      let current_count = get_bal some_from_count in
        let is_zero = builtin eq current_count zero in
          match is_zero with
          | True => zero
          | False => builtin sub current_count one
          end;
    owned_token_count[address] := new_from_count
  end
end

(* Check is user from "address" param owner of project with param "project_id" *)
procedure IsProjectOwner(project_id: Uint256, address: ByStr20)
  project_owner <- projects_owner[project_id];
  match project_owner with
  | Some project_owner_addr => 
      is_project_owner = builtin eq project_owner_addr address;
      match is_project_owner with
      | True =>
      | False =>
      err = CodeNotProjectOwner;
      ThrowError err
      end
  | None =>
      err = CodeNotFound;
      ThrowError err
  end
end

(* Check if tier has max subscriber *)
procedure IsTierHasMaxSubscriber(tier_id: Uint256)
  has_tier_id_max_subscriber <- tier_ids_max_subscriber[tier_id];
  match has_tier_id_max_subscriber with
  | Some tier_id_max_subscriber =>
    is_unlimited = builtin eq tier_id_max_subscriber negative_one_int_32;
    match is_unlimited with
    | True => 
    | False =>
      has_current_count <- tier_ids_subscriber_count[tier_id];
      match has_current_count with
      | Some current_count =>
        is_unfilled =  builtin eq tier_id_max_subscriber current_count;
        match is_unfilled with 
        | False =>
        | True => 
          err = CodeFullTier;
          ThrowError err
        end 
      | None =>
      end
    end 
  | None =>
    err = CodeTierIdMaxSubscriberNotFound;
    ThrowError err
  end
end

(* Update tier_id subscriber count list *)
procedure UpdateTierIdSubscriberCountList(tier_id: Uint256)
  has_current_count <- tier_ids_subscriber_count[tier_id];
  match has_current_count with
  | None =>
    tier_ids_subscriber_count[tier_id] := one_int_32
  | Some current_count =>
    new_count = builtin add current_count one_int_32;
    tier_ids_subscriber_count[tier_id] := new_count
  end 
end

(* Getter transitions *)

(* @dev: Get number of NFTs assigned to a token_owner *)
transition BalanceOf(address: ByStr20)
  some_bal <- owned_token_count[address];
  balance = get_bal some_bal;
  msg_to_sender = { _tag : "BalanceOfCallBack"; _recipient : _sender; _amount : Uint128 0;
                   balance : balance};
  msgs = one_msg msg_to_sender;
  send msgs
end

transition Balance()
  bal <- _balance;
  msg_to_sender = { _tag : "BalanceQA"; _recipient : _sender; _amount : Uint128 0;
                   balance : bal};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Get total supply of NFTs minted *)
transition TotalSupply()
  current_supply <- total_supply;
  msg_to_sender = { _tag : "TotalSupplyCallBack"; _recipient : _sender; _amount : Uint128 0;
                   total_supply : current_supply};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Get name of the NFTs *)
transition Name()
  msg_to_sender = { _tag : "NameCallBack"; _recipient : _sender; _amount : Uint128 0;
                   name : name};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Get name of the NFTs *)
transition Symbol()
  msg_to_sender = { _tag : "SymbolCallBack"; _recipient : _sender; _amount : Uint128 0;
                   symbol : symbol};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Get approved_addr for token_id *)
transition GetApproved(token_id: Uint256)
  some_token_approval <- tokens_approval[token_id];
  match some_token_approval with
  | Some addr => 
    msg_to_sender = { _tag : "GetApprovedCallBack"; _recipient : _sender; _amount : Uint128 0; 
                      approved_addr : addr; token_id : token_id};
    msgs = one_msg msg_to_sender;
    send msgs
  | None => 
    err = CodeNotApproved;
    ThrowError err
  end
end

(* @dev: Check if a token_id is owned by a token_owner *)
transition CheckTokenOwner(token_id: Uint256, address: ByStr20)
  IsTokenOwner token_id address;
  msg_to_sender = { _tag : "IsTokenOwnerCallBack"; _recipient : _sender; _amount : Uint128 0};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Check if address is operator for token_owner *)
transition CheckApprovedForAll(token_owner: ByStr20, operator: ByStr20)
  IsApprovedForAll token_owner operator;
  msg_to_sender = { _tag : "IsApprovedForAllCallBack"; _recipient : _sender; _amount : Uint128 0;
                    token_owner : token_owner; operator : operator};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* Buy new token (Mint)*)
transition BuyNewToken(tier_id: Uint256)
  
  (* Has tier max subscriber *)
  IsTierHasMaxSubscriber tier_id;

  (* Add to owner count *)
  UpdateTokenCount add_operation _sender;

  (* Add to total_supply *)
  current_supply <- total_supply;
  new_supply = builtin add current_supply one;
  total_supply := new_supply;

  (* Add in tier_id subscriber count list*)
  UpdateTierIdSubscriberCountList tier_id;

  (* Initiate token_id and check if exists *)
  current_token_id_count <- token_id_count;
  new_token_id_count = builtin add current_token_id_count one;
  token_id_count := new_token_id_count;
  token_id = current_token_id_count;
  IsTokenExists token_id;
  
  (* Transfer amount to token(project) owner*)
  has_project_id <- tier_ids_project[tier_id];
  match has_project_id with
  | Some project_id =>
    has_project_owner <- projects_owner[project_id];
    match has_project_owner with
    | Some project_owner =>
      has_tier_id_price <- tier_ids_price[tier_id];
      match has_tier_id_price with
      | Some tier_id_price =>
        (* Buy new non-fungible token *)
        tokens_owner[token_id] := _sender;
        tokens_creator[token_id] := project_owner;
        tokens_tier_id[token_id] := tier_id;

        blk <- & BLOCKNUMBER;
        has_tier_time_limit <- tier_ids_time_limit[tier_id];
        match has_tier_time_limit with
        | Some tier_time_limit  =>
          has_one_uint32 = builtin eq tier_time_limit one_uint_32;
          match has_one_uint32 with
          | True =>
            blocks_for_add = builtin div week_seconds block_seconds;
            token_time_limit = builtin badd blk blocks_for_add;
            tokens_time_limit[token_id] := token_time_limit
          | False =>
          end;

          has_two_uint32 = builtin eq tier_time_limit two_uint_32;
          match has_two_uint32 with
          | True =>
            blocks_for_add = builtin div month_seconds block_seconds;
            token_time_limit = builtin badd blk blocks_for_add;
            tokens_time_limit[token_id] := token_time_limit
          | False =>
          end;
            
          has_four_uint_32 = builtin eq tier_time_limit four_uint_32;
          match has_four_uint_32 with
          | True =>
            blocks_for_add = builtin div minute_seconds block_seconds;
            token_time_limit = builtin badd blk blocks_for_add;
            tokens_time_limit[token_id] := token_time_limit
          | False =>
          end
        | None =>
          err = CodeTierHasNoTimeLimit;
          ThrowError err
        end;

        e = {_eventname: "BuyNewTokenSuccess"; token_id: token_id};
        event e;
        
        accept;
        msg_to_recipient = { _tag : "BuyNewTokenCallBackBuy"; _recipient : project_owner; _amount : tier_id_price; 
              from : _sender; recipient : project_owner; token_id : token_id}; 
        msg_to_sender = { _tag : "BuyNewTokenCallBack"; _recipient : _sender; _amount : Uint128 0;
                          token_id : token_id};
        msgs = two_msgs msg_to_recipient msg_to_sender;
        send msgs
      | None =>
        err = CodeTierIdPriceNotFound;
        ThrowError err
      end
    | None =>
      err = CodeProjectHasNoOwner;
      ThrowError err
    end
  | None =>
    err = CodeTierHasNoProject;
    ThrowError err
  end
end


(* @dev:    Burn expired token. Only token_owner or an operator can burn a NFT. *)
(* @param:  token_id - Unique ID of the NFT to be destroyed                       *)
transition BurnExpiredToken(token_id: Uint256)
  (* Check if token exists *)
  some_token_owner <- tokens_owner[token_id];
  match some_token_owner with
  | None =>
    err = CodeNotFound;
    ThrowError err
  | Some token_owner =>
    IsOwnerOrOperator token_owner;

    hasTokenTimeLimit <- tokens_time_limit[token_id];
    match hasTokenTimeLimit with
    | Some tokenTimeLimit =>
      blk <- & BLOCKNUMBER;
      has_expired = builtin blt tokenTimeLimit blk;
      match has_expired with
      | True =>
        (* Destroy existing token *)
        delete tokens_owner[token_id];
        delete tokens_approval[token_id];
        delete tokens_sell_price[token_id];
        delete tokens_creator[token_id];
        delete tokens_tier_id[token_id];
        delete tokens_tier_id[token_id];
        delete tokens_time_limit[token_id];

        (* Deduct from owned_token_count *)
        UpdateTokenCount sub_operation token_owner;
        (* Deduct from total_supply *)
        current_supply <- total_supply;
        new_supply = builtin sub current_supply one;
        total_supply := new_supply;
        e = {_eventname: "BurnSuccess"; initiator: _sender; burn_address: token_owner; token_id: token_id};
        event e;
        msg_to_sender = { _tag : "BurnCallBack"; _recipient : _sender; _amount : Uint128 0;
                          initiator : _sender; burn_address : token_owner; token_id : token_id };
        msgs = one_msg msg_to_sender;
        send msgs
      | False =>
        err = CodeNotFound;
        ThrowError err
      end
    | None => 
      err = CodeNotFound;
      ThrowError err
    end 
  end
end


(* @dev: Approves OR remove an address ability to transfer a given token_id *)
(* There can only be one approved_spender per token at any given time       *)
(* param: to       - Address to be approved for the given token_id          *)
(* param: token_id - Unique ID of the NFT to be approved                    *)
transition SetApprove(to: ByStr20, token_id: Uint256)
  some_token_owner <- tokens_owner[token_id];
  match some_token_owner with
  | None =>
    err = CodeNotFound;
    ThrowError err
  | Some token_owner =>
    IsOwnerOrOperator token_owner;
    is_approved <- tokens_approval[token_id];
    match is_approved with
    | Some approved_spender =>
      (* Remove approved_spender *)
      is_approved_spender = builtin eq to approved_spender;
      match is_approved_spender with
      | True =>
        delete tokens_approval[token_id];
        e = {_eventname: "RemoveApprovalSuccess"; initiator: _sender; removed_spender: to; token_id: token_id};
        event e;
        msg_to_sender = { _tag : "RemoveApprovalSuccessCallBack"; _recipient : _sender; _amount : Uint128 0; 
                          removed_spender : to; token_id : token_id };
        msgs = one_msg msg_to_sender;
        send msgs
      | False =>
        err = CodeNotApproved;
        ThrowError err
      end
    | None =>
      (* Add approved_spender *)
      tokens_approval[token_id] := to;
      e = {_eventname: "AddApprovalSuccess"; initiator: _sender; approved_spender: to; token_id: token_id};
      event e;
      msg_to_sender = { _tag : "AddApprovalSuccessCallBack"; _recipient : _sender; _amount : Uint128 0; 
                        approved_spender : to; token_id : token_id };
      msgs = one_msg msg_to_sender;
      send msgs
    end
  end
end

(* @dev: Sets or unsets an operator for the _sender       *)
(* @param: to - Address to be set or unset as an operator *)
transition SetApprovalForAll(to: ByStr20)
  IsSelf to _sender;
  is_operator <- exists operator_approvals[_sender][to];
  match is_operator with
  | False =>
    (* Add operator *)
    operator_approvals[_sender][to] := verdad;
    e = {_eventname: "AddApprovalForAllSuccess"; initiator: _sender; operator: to};
    event e
  | True =>
    (* Remove operator *)
    delete operator_approvals[_sender][to];
    e = {_eventname: "RemoveApprovalForAllSuccess"; initiator: _sender; operator: to};
    event e
  end;
  new_status = negb is_operator;
  msg_to_sender = { _tag : "SetApprovalForAllSuccessCallBack"; _recipient : _sender; _amount : Uint128 0; 
                    operator : to; status : new_status};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Transfer the ownership of a given token_id to another address. token_owner only transition. *)
(* @param: to       - Recipient address for the token                                                *)
(* @param: token_id - Unique ID of the NFT to be transferred                                         *)
transition Transfer(to: ByStr20, token_id: Uint256)
  IsSelf to _sender;
  IsTokenOwner token_id _sender;
  (* Change token_owner for that token_id *)
  tokens_owner[token_id] := to;
  (* Delete tokenApproval entry for that token_id *)
  delete tokens_approval[token_id];
  (* Subtract one from previous token owner count *)
  UpdateTokenCount sub_operation _sender;
  (* Add one to the new token owner count *)
  UpdateTokenCount add_operation to;
  e = {_eventname: "TransferSuccess"; from: _sender; recipient: to; token_id: token_id};
  event e;
  msg_to_recipient = { _tag : "RecipientAcceptTransfer"; _recipient : to; _amount : Uint128 0; 
                      from : _sender; recipient : to; token_id : token_id };
  msg_to_sender = { _tag : "TransferSuccessCallBack"; _recipient : _sender; _amount : Uint128 0; 
                    from : _sender; recipient : to; token_id : token_id };
  msgs = two_msgs msg_to_recipient msg_to_sender;
  send msgs
end

(* @dev: Transfer the ownership of a given token_id to another address. approved_spender or operator only transition. *)
(* @param: to       - Recipient address for the NFT                                                                   *)
(* @param: token_id - Unique ID of the NFT to be transferred                                                          *)
transition TransferFrom(to: ByStr20, token_id: Uint256)
  some_token_owner <- tokens_owner[token_id];
  match some_token_owner with
  | None =>
    err = CodeNotFound;
    ThrowError err
  | Some token_owner =>
    IsSelf to token_owner;
    IsApprovedSpenderOrOperator token_id token_owner;
    (* Change token_owner for that token_id *)
    tokens_owner[token_id] := to;
    (* Delete tokenApproval entry for that token_id *)
    delete tokens_approval[token_id];
    (* Subtract one from previous token owner count *)
    UpdateTokenCount sub_operation token_owner;
    (* Add one to the new token owner count *)
    UpdateTokenCount add_operation to;
    e = {_eventname: "TransferFromSuccess"; from: token_owner; recipient: to; token_id: token_id};
    event e;
    msg_to_recipient = { _tag : "RecipientAcceptTransferFrom"; _recipient : to; _amount : Uint128 0; 
                        from : token_owner; recipient : to; token_id : token_id };
    msg_to_sender = { _tag : "TransferFromSuccessCallBack"; _recipient : _sender; _amount : Uint128 0; 
                      from : token_owner; recipient : to; token_id : token_id };
    msgs = two_msgs msg_to_recipient msg_to_sender;
    send msgs
  end
end

(* @dev: Create new project *)                                                       
transition CreateProject()
  current_project_id <- project_id_count;

  (* Save sender to project ID*)
  projects_owner[current_project_id] := _sender;

  (* Add counter for another project*)
  new_project_id_count = builtin add current_project_id one;
  project_id_count := new_project_id_count;

  (* Send event that project is success *)
  e = {_eventname: "CreateProjectSuccess"; project_id: current_project_id};
  event e;

  (* Send callback to sender *)
  msg_to_sender = { _tag : "CreateProjectSuccessCallback"; _recipient : _sender; _amount : Uint128 0; 
                    project_id : current_project_id};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Create new tier on project *)                                                       
transition CreateTierOnProject(project_id: Uint256, max_subscriber: Int32, time_limit: Uint32, price: Uint128, resell_type: Uint32, resell_value: Uint128)
  IsProjectOwner project_id _sender;

  current_tier_id <- tier_id_count;

  (* Set project ID to tier*)
  tier_ids_project[current_tier_id] := project_id;

  (* Set max subsciber for tier *)
  tier_ids_max_subscriber[current_tier_id] := max_subscriber;

  (* Set time limit for tier *)
  tier_ids_time_limit[current_tier_id] := time_limit;

  (* Set price for tier *)
  tier_ids_price[current_tier_id] := price;

  (* Resell type - *1 percent, 2 fixed *)
  tier_ids_resell_type[current_tier_id] := resell_type;

  (* Resell type *)
  tier_ids_resell_value[current_tier_id] := resell_value;

  (* Add counter for another tier*)
  new_tier_id_count = builtin add current_tier_id one;
  tier_id_count := new_tier_id_count;
 
  (* Send event that tier create is success *)
  e = {_eventname: "CreateTierSuccess"; tier_id: current_tier_id};
  event e;

  (* Send callback to sender *)
  msg_to_sender = { _tag : "CreateTierSuccessCallback"; _recipient : _sender; _amount : Uint128 0; 
                      tier_id : current_tier_id};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Set token for sell *)                                                       
transition SetTokenForSell(token_id: Uint256, price_for_sell: Uint128)
  IsTokenOwner token_id _sender;
  
  tokens_sell_price[token_id] := price_for_sell;

  (* Send event that project is success *)
  e = {_eventname: "SuccessTokenForSell"; token_id: token_id};
  event e;

  (* Send callback to sender *)
  msg_to_sender = { _tag : "SuccessTokenForSellCallback"; _recipient : _sender; _amount : Uint128 0; 
                token_id : token_id};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Set token for sell *)                                                       
transition SetCancelTokenForSell(token_id: Uint256)
  IsTokenOwner token_id _sender;
  
  delete tokens_sell_price[token_id];

  (* Send event that project is success *)
  e = {_eventname: "SuccessCancelTokenForSell"; token_id: token_id};
  event e;

  (* Send callback to sender *)
  msg_to_sender = { _tag : "SuccessCancelTokenForSellCallback"; _recipient : _sender; _amount : Uint128 0; 
                token_id : token_id};
  msgs = one_msg msg_to_sender;
  send msgs
end

(* @dev: Transfer the ownership of a given token_id to another address. token_owner only transition. *)
(* @param: to       - Recipient address for the token                                                *)
(* @param: token_id - Unique ID of the NFT to be transferred                                         *)
transition SellToken(token_id: Uint256)
  some_token_owner <- tokens_owner[token_id];
  match some_token_owner with
  | None =>
    err = CodeNotFound;
    ThrowError err
  | Some token_owner =>
    (* Change token_owner for that token_id *)
    tokens_owner[token_id] := _sender;
    (* Subtract one from previous token owner count *)
    UpdateTokenCount sub_operation token_owner;
    (* Add one to the new token owner count *)
    UpdateTokenCount add_operation _sender;

    some_token_sell_price <- tokens_sell_price[token_id];
    match some_token_sell_price with
    | None =>
      err = CodeNotFound;
      ThrowError err
    | Some token_sell_price =>

      has_project_owner <- tokens_creator[token_id];
      match has_project_owner with
      | Some project_owner =>

        delete tokens_sell_price[token_id];

        (* Check if token has that tier *)
        has_tier_id <- tokens_tier_id[token_id];
        match has_tier_id with
        | Some tier_id =>
          (* Check if tier has resell type *)
          has_resell_type <- tier_ids_resell_type[tier_id];
          match has_resell_type with
          | Some resell_type =>
            (* Check if tier has resell value *)
            has_resell_value <- tier_ids_resell_value[tier_id];
            match has_resell_value with 
            | Some resell_value =>
              (* Check if resell value is zero (no fee for project owner)*)
              resell_value_equal_zero = builtin eq resell_value zero_uint128;
              match resell_value_equal_zero with
              | False =>
                (* Check if is resell type percent *)
                resell_type_temp = builtin eq resell_type one_uint_32;
                match resell_type_temp with
                | True =>
                  (* Calculate amounts for project owner and token owner - calculation for percent resell type *)
                  amount_for_project_owner_temp = builtin mul token_sell_price resell_value;
                  amount_for_project_owner = builtin div amount_for_project_owner_temp one_hundred_uint128;
                  amount_for_token_seller = builtin sub token_sell_price amount_for_project_owner;

                  e = {_eventname: "SellTokenSuccess"; from: _sender; recipient: token_owner; token_id: token_id};
                  event e;

                  accept;
                  
                  (* send amoun*)
                  msg_to_tier_owner = { _tag : "SellTokenTierOwner"; _recipient : project_owner; _amount : amount_for_project_owner; 
                                      token_id : token_id };
                  msg_to_recipient = { _tag : "SellTokenRecipient"; _recipient : token_owner; _amount : amount_for_token_seller; 
                                    token_id : token_id };
                  msg_to_sender = { _tag : "SellToken"; _recipient : _sender; _amount : Uint128 0; 
                                    token_id : token_id };
                  msgs = three_msgs msg_to_tier_owner msg_to_recipient msg_to_sender;
                  send msgs
                | False =>
                  (* Calculate amounts for project owner and token owner - calculation for value resell type *)
                  amount_for_project_owner = builtin sub token_sell_price resell_value;
                  amount_for_token_seller = builtin sub token_sell_price amount_for_project_owner;

                  e = {_eventname: "SellTokenSuccess"; from: _sender; recipient: token_owner; token_id: token_id};
                  event e;

                  accept;
                  
                  msg_to_tier_owner = { _tag : "SellTokenTierOwner"; _recipient : project_owner; _amount : amount_for_project_owner; 
                                      token_id : token_id };
                  msg_to_recipient = { _tag : "SellTokenRecipient"; _recipient : token_owner; _amount : amount_for_token_seller; 
                                    token_id : token_id };
                  msg_to_sender = { _tag : "SellToken"; _recipient : _sender; _amount : Uint128 0; 
                                    token_id : token_id };
                  msgs = three_msgs msg_to_tier_owner msg_to_recipient msg_to_sender;
                  send msgs
                end
              | True =>
                
                e = {_eventname: "SellTokenSuccess"; from: _sender; recipient: token_owner; token_id: token_id};
                event e;

                accept;
                msg_to_recipient = { _tag : "SellTokenRecipient"; _recipient : token_owner; _amount : token_sell_price; 
                                  token_id : token_id };
                msg_to_sender = { _tag : "SellToken"; _recipient : _sender; _amount : Uint128 0; 
                                  token_id : token_id };
                msgs = two_msgs msg_to_recipient msg_to_sender;
                send msgs
              end
            | None =>
              err = CodeNotFound;
              ThrowError err
            end
          | None =>
            err = CodeNotFound;
            ThrowError err
          end
        | None =>
          err = CodeNotFound;
          ThrowError err
        end 
      | None => 
        err = CodeNotFound;
        ThrowError err
      end
    end
  end
end