// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Event extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Event entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Event entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Event", id.toString(), this);
  }

  static load(id: string): Event | null {
    return store.get("Event", id) as Event | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get startDate(): BigInt {
    let value = this.get("startDate");
    return value.toBigInt();
  }

  set startDate(value: BigInt) {
    this.set("startDate", Value.fromBigInt(value));
  }

  get metadataIpfsCid(): string {
    let value = this.get("metadataIpfsCid");
    return value.toString();
  }

  set metadataIpfsCid(value: string) {
    this.set("metadataIpfsCid", Value.fromString(value));
  }
}

export class TicketCategory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TicketCategory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TicketCategory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TicketCategory", id.toString(), this);
  }

  static load(id: string): TicketCategory | null {
    return store.get("TicketCategory", id) as TicketCategory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventId(): BigInt {
    let value = this.get("eventId");
    return value.toBigInt();
  }

  set eventId(value: BigInt) {
    this.set("eventId", Value.fromBigInt(value));
  }

  get currentMintTickets(): BigInt {
    let value = this.get("currentMintTickets");
    return value.toBigInt();
  }

  set currentMintTickets(value: BigInt) {
    this.set("currentMintTickets", Value.fromBigInt(value));
  }

  get maxTickets(): BigInt {
    let value = this.get("maxTickets");
    return value.toBigInt();
  }

  set maxTickets(value: BigInt) {
    this.set("maxTickets", Value.fromBigInt(value));
  }

  get ticketPrice(): BigInt {
    let value = this.get("ticketPrice");
    return value.toBigInt();
  }

  set ticketPrice(value: BigInt) {
    this.set("ticketPrice", Value.fromBigInt(value));
  }

  get resellTicketValue(): BigInt {
    let value = this.get("resellTicketValue");
    return value.toBigInt();
  }

  set resellTicketValue(value: BigInt) {
    this.set("resellTicketValue", Value.fromBigInt(value));
  }

  get metadataIpfsCid(): string {
    let value = this.get("metadataIpfsCid");
    return value.toString();
  }

  set metadataIpfsCid(value: string) {
    this.set("metadataIpfsCid", Value.fromString(value));
  }
}

export class Ticket extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Ticket entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Ticket entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Ticket", id.toString(), this);
  }

  static load(id: string): Ticket | null {
    return store.get("Ticket", id) as Ticket | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventId(): BigInt {
    let value = this.get("eventId");
    return value.toBigInt();
  }

  set eventId(value: BigInt) {
    this.set("eventId", Value.fromBigInt(value));
  }

  get ticketCategoryId(): BigInt {
    let value = this.get("ticketCategoryId");
    return value.toBigInt();
  }

  set ticketCategoryId(value: BigInt) {
    this.set("ticketCategoryId", Value.fromBigInt(value));
  }

  get forBid(): BigInt {
    let value = this.get("forBid");
    return value.toBigInt();
  }

  set forBid(value: BigInt) {
    this.set("forBid", Value.fromBigInt(value));
  }
}
